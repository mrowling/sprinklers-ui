{"version":3,"sources":["react-auth0-spa.js","components/NavLink.js","components/NavBar.js","components/Profile.js","components/PumpDisplay.js","components/SprinklerButton.js","components/SprinklerControl.js","config.js","utils/callApi.js","utils/pumpApi.js","utils/sprinklerApi.js","components/SprinklerPage.js","utils/history.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","NavButton","props","to","color","renderLink","useMemo","forwardRef","itemProps","ref","Button","component","NavBar","AppBar","position","onClick","Profile","src","picture","alt","name","email","JSON","stringify","PumpDisplay","estimatedEndTime","active","Box","width","Card","CardHeader","CardContent","height","CircularProgress","fontSize","date","Date","renderer","minutes","seconds","completed","toString","padStart","SprinklerButton","callApi","disabled","size","fullWidth","SprinklerControl","activeIcons","displayActive","buttonActive","triggerSprinkler","activeIconElements","index","push","key","CardActions","isLocalBrowser","hostname","config","protocol","apiHost","basePath","method","path","jwt","__raw","fetch","headers","Authorization","response","json","responseData","baseApi","getApi","putApi","SprinklerPage","pumpActive","setPumpActive","activeSprinkler","setActiveSprinkler","setEstimatedEndTime","snackBarMessage","setSnackBarMessage","incrementCount","setIncrementCount","preemptivelySetState","shortName","success","message","defaultMessage","severity","getPumpData","running","estimated_end_time","running_sprinkler_name","increment_count","interval","setInterval","clearInterval","handleSnackbarClose","event","reason","Grid","container","spacing","item","justify","alignItems","Snackbar","open","autoHideDuration","onClose","Alert","createBrowserHistory","PrivateRoute","Component","rest","targetUrl","fn","render","useStyles","makeStyles","theme","appBarSpacer","mixins","toolbar","content","flexGrow","overflow","paddingTop","paddingBottom","App","classes","className","appBar","exact","Boolean","match","ReactDOM","StrictMode","domain","client_id","clientId","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.590cb1d5.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (\n        window.location.search.includes(\"code=\") &&\n        window.location.search.includes(\"state=\")\n      ) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p),\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\n\nfunction NavButton(props) {\n  const { to, color, children } = props;\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        <Link to={to} ref={ref} {...itemProps} />\n      )),\n    [to]\n  );\n\n  return (\n    <Button color={color} component={renderLink}>\n      {children}\n    </Button>\n  );\n}\n\nexport default NavButton;\n","import React from \"react\";\nimport { AppBar, Button } from \"@material-ui/core\";\n\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport NavButton from \"./NavLink\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <AppBar position=\"fixed\">\n      {!isAuthenticated && (\n        <Button color=\"inherit\" onClick={() => loginWithRedirect({})}>\n          Login\n        </Button>\n      )}\n\n      {isAuthenticated && (\n        <span>\n          <NavButton color=\"inherit\" to=\"/profile\">\n            PROFILE\n          </NavButton>\n          <NavButton color=\"inherit\" to=\"/sprinklers\">\n            SPRINKLERS\n          </NavButton>\n          <Button color=\"inherit\" onClick={() => logout()}>\n            Log out\n          </Button>\n        </span>\n      )}\n    </AppBar>\n  );\n};\n\nexport default NavBar;\n","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Countdown from \"react-countdown\";\n\nfunction PumpDisplay(props) {\n  const { name, estimatedEndTime, active } = props;\n  const countdownRender = ({ minutes, seconds, completed }) =>\n    completed ? null : `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n\n  return (\n    <Box width={\"90%\"}>\n      <Card>\n        <CardHeader title={name} />\n        <CardContent>\n          <Box height={50}>\n            {active && <CircularProgress color=\"primary\" />}\n            {!active && (\n              <PauseCircleOutlineIcon fontSize=\"large\" color=\"primary\" />\n            )}\n          </Box>\n          <Box height={30}>\n            {estimatedEndTime && (\n              <Countdown\n                date={new Date(estimatedEndTime)}\n                renderer={countdownRender}\n              />\n            )}\n          </Box>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n}\n\nexport default PumpDisplay;\n","import React from \"react\";\nimport { Button, Grid } from \"@material-ui/core\";\n\nfunction SprinklerButton(props) {\n  const { callApi, disabled } = props;\n  return (\n    <Button\n      onClick={() => callApi()}\n      size=\"large\"\n      color=\"primary\"\n      fullWidth={true}\n      disabled={disabled}\n    >\n      Trigger\n    </Button>\n  );\n}\n\nexport default SprinklerButton;\n","import React, { useState } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport InvertColorsIcon from \"@material-ui/icons/InvertColors\";\nimport InvertColorsOffIcon from \"@material-ui/icons/InvertColorsOff\";\n\nimport SprinkerButton from \"./SprinklerButton\";\n\nfunction SprinklerControl(props) {\n  const {\n    activeIcons,\n    displayActive,\n    buttonActive,\n    name,\n    triggerSprinkler,\n  } = props;\n\n  const activeIconElements = [];\n  if (displayActive) {\n    for (let index = 0; index < (activeIcons || 1); index++) {\n      activeIconElements.push(<InvertColorsIcon key={index} color=\"primary\" />);\n    }\n  }\n  return (\n    <Box width={1 / 4}>\n      <Card>\n        <CardHeader title={name} />\n        {displayActive ? (\n          activeIconElements\n        ) : (\n          <InvertColorsOffIcon color=\"disabled\" />\n        )}\n        <CardActions>\n          <SprinkerButton\n            disabled={!buttonActive || activeIcons >= 3}\n            callApi={triggerSprinkler}\n          />\n        </CardActions>\n      </Card>\n    </Box>\n  );\n}\n\nexport default SprinklerControl;\n","const isLocalBrowser = () => window.location.hostname === \"localhost\";\n\nexport const config = {\n  protocol: isLocalBrowser() ? \"http\" : \"https\",\n  apiHost: isLocalBrowser()\n    ? \"localhost:8000\"\n    : \"sprinklers.erinandmitchell.com\",\n};\n","import { config } from \"../config\";\n\nexport const callApi = (basePath) => (method) => async (\n  getIdTokenClaims,\n  path = \"\"\n) => {\n  const { apiHost, protocol } = config;\n  const { __raw: jwt } = await getIdTokenClaims();\n  const response = await fetch(`${protocol}://${apiHost}/${basePath}${path}`, {\n    method: method,\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n    },\n  });\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nexport const getApi = callApi(\"GET\");\nexport const putApi = callApi(\"PUT\");\n","import { callApi } from \"./callApi\";\n\nconst basePath = \"pump\";\n\nconst baseApi = callApi(basePath);\n\nexport const getApi = baseApi(\"GET\");\nexport const putApi = baseApi(\"PUT\");\n","import { callApi } from \"./callApi\";\n\nconst basePath = \"sprinkler\";\n\nconst baseApi = callApi(basePath);\n\nexport const getApi = baseApi(\"GET\");\nexport const putApi = baseApi(\"PUT\");\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nimport PumpDisplay from \"./PumpDisplay\";\nimport SprinkerControl from \"./SprinklerControl\";\n\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { getApi } from \"../utils/pumpApi\";\nimport { putApi } from \"../utils/sprinklerApi\";\n\nconst SprinklerPage = () => {\n  const [pumpActive, setPumpActive] = useState(false);\n  const [activeSprinkler, setActiveSprinkler] = useState(false);\n  const [estimatedEndTime, setEstimatedEndTime] = useState();\n  const [snackBarMessage, setSnackBarMessage] = useState(false);\n  const [incrementCount, setIncrementCount] = useState(0);\n  const { getIdTokenClaims } = useAuth0();\n\n  const preemptivelySetState = (shortName) => {\n    setActiveSprinkler(shortName);\n    setIncrementCount(incrementCount + 1);\n    setPumpActive(true);\n  };\n\n  const triggerSprinkler = (shortName) => async () => {\n    preemptivelySetState(shortName);\n    const responseData = await putApi(getIdTokenClaims, `/${shortName}`);\n    const { success, message } = responseData;\n    const defaultMessage = success ? \"Success\" : \"An Error Occured\";\n    const snackBarMessage = {\n      message: message || defaultMessage,\n      severity: success ? \"success\" : \"error\",\n    };\n    setSnackBarMessage(snackBarMessage);\n  };\n\n  const getPumpData = async () => {\n    const responseData = await getApi(getIdTokenClaims);\n    const {\n      running,\n      estimated_end_time,\n      running_sprinkler_name,\n      increment_count,\n    } = responseData;\n    setPumpActive(running);\n    setActiveSprinkler(running_sprinkler_name);\n    setIncrementCount(increment_count);\n    setEstimatedEndTime(estimated_end_time);\n  };\n\n  useEffect(() => {\n    getPumpData();\n    const interval = setInterval(() => {\n      getPumpData();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackBarMessage(false);\n  };\n\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid container item justify=\"space-evenly\" alignItems=\"center\">\n          <PumpDisplay\n            name=\"Pump\"\n            estimatedEndTime={estimatedEndTime}\n            active={pumpActive}\n          />\n        </Grid>\n        <Grid container item justify=\"space-evenly\" alignItems=\"center\">\n          <SprinkerControl\n            triggerSprinkler={triggerSprinkler(\"north\")}\n            name=\"North\"\n            buttonActive={!activeSprinkler || activeSprinkler === \"north\"}\n            displayActive={activeSprinkler === \"north\"}\n            activeIcons={incrementCount}\n          />\n          <SprinkerControl\n            triggerSprinkler={triggerSprinkler(\"middle\")}\n            name=\"Centre\"\n            buttonActive={!activeSprinkler || activeSprinkler === \"middle\"}\n            displayActive={activeSprinkler === \"middle\"}\n            activeIcons={incrementCount}\n          />\n          <SprinkerControl\n            triggerSprinkler={triggerSprinkler(\"south\")}\n            name=\"South\"\n            buttonActive={!activeSprinkler || activeSprinkler === \"south\"}\n            displayActive={activeSprinkler === \"south\"}\n            activeIcons={incrementCount}\n          />\n        </Grid>\n        <Grid container item justify=\"space-evenly\" alignItems=\"center\">\n          <SprinkerControl\n            triggerSprinkler={triggerSprinkler(\"east\")}\n            name=\"East\"\n            buttonActive={!activeSprinkler || activeSprinkler === \"east\"}\n            displayActive={activeSprinkler === \"east\"}\n            activeIcons={incrementCount}\n          />\n          <SprinkerControl\n            triggerSprinkler={triggerSprinkler(\"west\")}\n            name=\"West\"\n            buttonActive={!activeSprinkler || activeSprinkler === \"west\"}\n            displayActive={activeSprinkler === \"west\"}\n            activeIcons={incrementCount}\n          />\n        </Grid>\n      </Grid>\n      <Snackbar\n        open={!!snackBarMessage}\n        autoHideDuration={5000}\n        onClose={handleSnackbarClose}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity={snackBarMessage.severity}\n        >\n          {snackBarMessage.message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default SprinklerPage;\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: { targetUrl: window.location.pathname },\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = (props) =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport SprinklerPage from \"./components/SprinklerPage\";\n\nimport history from \"./utils/history\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n}));\n\nfunction App() {\n  const { loading } = useAuth0();\n  const classes = useStyles();\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Don't forget to include the history module */}\n      <Router history={history}>\n        <header>\n          <NavBar className={classes.appBar} />\n        </header>\n        <main className={classes.content}>\n          <div className={classes.appBarSpacer} />\n          <Switch>\n            <Route path=\"/\" exact />\n            <PrivateRoute path=\"/profile\" component={Profile} />\n            <PrivateRoute path=\"/sprinklers\" component={SprinklerPage} />\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = (appState) => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain={config.domain}\n      client_id={config.clientId}\n      redirect_uri={window.location.origin}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <App />\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}